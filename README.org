#+TITLE: Emacs + eVil + Org (EVO)
#+AUTHOR: Jack Henahan
| *Author* | Jack Henahan <jhenahan@me.com> |
|----------+--------------------------------|
| *Date*   | 2017-06-27 19:36:31            |

#+NAME: Note
#+BEGIN_SRC emacs-lisp
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------
  (provide 'evo)
#+END_SRC

* Emacs Configuration in an Org file
I've declared Emacs config bankruptcy (again!). In the interest of a
wacky refresh, might as well just start from scratch. =req-package=,
=Cask=, and =pallet= don't quite fit my needs, anymore, so this'll
be a fairly straightforward =quelpa= and =use-package= affair.

* Keep Custom Out of Version Control
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)  
#+END_SRC

* Package Management

** Initialize Quelpa (auto-upgrade snippet)
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (if (require 'quelpa nil t)
      (quelpa-self-upgrade)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
      (eval-buffer)))  
#+END_SRC

** Install =quelpa-use-package=
#+BEGIN_SRC emacs-lisp
  (quelpa
   '(quelpa-use-package
     :fetcher github
     :repo "quelpa/quelpa-use-package"))
  (require 'quelpa-use-package)   
#+END_SRC

* Core Configuration
First, I need to undo a series of exceptionally terrible defaults
that Emacs insists upon, and set up basic ergonomy.

** System Settings
*** Backups
There's a very compelling [[https://stackoverflow.com/a/20824625/794944][SO answer]] (and accompanying [[https://www.emacswiki.org/emacs/ForceBackups][ewiki page]])
which provides a really neat and quite robust backup strategy.

First, we set up versioned backups, which will keep 10 backups,
ought to be just about enough history for anyone. You can of course
tweak this if you find you need more.

#+BEGIN_SRC emacs-lisp
  (setq version-control t
        kept-new-versions 10
        kept-old-versions 0
        delete-old-versions t
        backup-by-copying t)
#+END_SRC

Emacs evidently doesn't backup version-controlled files by default,
so let's fix that. If you've never accidentally wiped all your work
between commits, we must be in different universes.

#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
#+END_SRC

Finally, we'll set up a two-pronged backup strategy -- per-save, and
per-session. First, we want to set up a directory for per-save
backups.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("" . ,(concat
  		user-emacs-directory "/backup/per-save"))))
#+END_SRC

Then, we hook into the =before-save= to save a per-session backup
(analogous to Emacs' usual backup strategy), then force a per-save
backup by unsetting =buffer-backed-up=.

#+BEGIN_SRC emacs-lisp
  (defun force-backup-of-buffer ()
      (when (not buffer-backed-up)
        (let ((backup-directory-alist
  	     `(("" . ,(concat
  		       user-emacs-directory "/backup/per-session"))))
  	    (kept-new-versions 3))
  	(backup-buffer)))
      (let ((buffer-backed-up nil))
        (backup-buffer)))
  
  (add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC
